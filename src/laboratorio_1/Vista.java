/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package laboratorio_1;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pc
 */
public class Vista extends javax.swing.JFrame {

    /**
     * Creates new form Vista
     */
    public static Hashtable<String, ArrayList<String>> directory;
    public static Vector<BigInteger> vec;
    public static BigInteger n, m, k;
    File archivo = new File("Archivo.txt");

    public Vista() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fc = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        Btn_llenar = new javax.swing.JButton();
        Btn_sort = new javax.swing.JButton();
        Btn_search = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Btn_max_min = new javax.swing.JButton();
        Btn_promedio = new javax.swing.JButton();
        btn_moda = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTable = new javax.swing.JTable();
        Txt_rp = new javax.swing.JTextField();
        btn_archivo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Llenar Campos: ");

        Btn_llenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_llenarActionPerformed(evt);
            }
        });

        Btn_sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_sortActionPerformed(evt);
            }
        });

        Btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_searchActionPerformed(evt);
            }
        });

        jLabel2.setText("Ordenar : ");

        jLabel3.setText("Buscar:");

        Btn_max_min.setText("Max / Min");
        Btn_max_min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_max_minActionPerformed(evt);
            }
        });

        Btn_promedio.setText("Media");
        Btn_promedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_promedioActionPerformed(evt);
            }
        });

        btn_moda.setText("Moda");
        btn_moda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modaActionPerformed(evt);
            }
        });

        JTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        JTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(JTable);

        btn_archivo.setText("Cargar Archivo");
        btn_archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_archivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Btn_sort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Btn_llenar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Btn_max_min, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(Btn_promedio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(btn_moda, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addComponent(btn_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Txt_rp))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                        .addComponent(Btn_llenar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Btn_max_min, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Btn_promedio, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_moda, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Btn_sort, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(Btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Txt_rp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Btn_llenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_llenarActionPerformed
        try {
            n = BigInteger.valueOf(Integer.parseInt(JOptionPane.showInputDialog("Ingrese el número de registros N ")));
            do {
                m = BigInteger.valueOf(Integer.parseInt(JOptionPane.showInputDialog("Ingrese el número de campos M ")));
            } while (m.compareTo(BigInteger.ZERO) <= 0);
            directory = new Hashtable<>();
            vec = new Vector<>();
            String[] rows = new String[m.intValue() + 1];
            int sw;
            String key, cad, camps;
            int[] random = new int[m.intValue()];
            random = RandomPos(random);
            DefaultTableModel model = (DefaultTableModel) JTable.getModel();
            model.setRowCount(0);
            model.setColumnCount(0);
            for (int i = 0; i < m.intValue() + 1; i++) {
                if (i == 0) {
                    model.addColumn("Key");
                } else {
                    model.addColumn("C." + i);
                }
            }
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo));) {
                for (BigInteger i = BigInteger.ZERO; i.compareTo(n) < 0; i = i.add(BigInteger.ONE)) {
                    ArrayList<String> campos = new ArrayList<>();
                    sw = 0;
                    camps = "";
                    for (BigInteger j = BigInteger.ZERO; j.compareTo(m) < 0; j = j.add(BigInteger.ONE)) {
                        switch (sw) {
                            case 0:
                                cad = RandomNum(BigInteger.valueOf(random[j.intValue()]), BigInteger.ZERO, "");
                                campos.add(cad);
                                camps += cad + ";";
                                rows[j.intValue() + 1] = cad;
                                sw = 1;
                                break;
                            case 1:
                                cad = RandomLetter(BigInteger.valueOf(random[j.intValue()]), BigInteger.ZERO, "");
                                campos.add(cad);
                                camps += cad + ";";
                                rows[j.intValue() + 1] = cad;
                                sw = 0;
                                break;
                        }
                    }
                    do {
                        key = RandomNum(BigInteger.valueOf(10), BigInteger.ZERO, "");
                    } while (directory.containsKey(key)); //Verificar que la clave no se repita
                    rows[0] = key;
                    vec.add(new BigInteger(key));
                    bw.write(key + ";" + camps);
                    bw.newLine();
                    directory.put(key, campos);//Direccionar información
                    model.addRow(rows);
                }
                JTable.setModel(model);
                System.out.println("¬Arhivo Cargado¬");
            } catch (IOException ex) {
                Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (Exception e) {

        }

    }//GEN-LAST:event_Btn_llenarActionPerformed

    private void Btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_searchActionPerformed
        int seleccion = JOptionPane.showOptionDialog(null, "Buscar por : ",
                "Select", JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null,// null para icono por defecto.
                new Object[]{"Llave", "Campo"}, "LLave");

        if (seleccion == 0) {
            String key = (JOptionPane.showInputDialog("Ingrese la llave: "));
            if (directory.containsKey(key)) {
                String dat = (JOptionPane.showInputDialog("Ingrese el dato: "));
                ArrayList<String> r = directory.get(key);
                if (r.contains(dat)) {
                    JOptionPane.showMessageDialog(null, "El " + dat + " se encontro");
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontro");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Llave incorrecta");
            }
        } else {
            int camp = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo: ")) - 1;
            if (camp < m.intValue() && camp >= 0) {
                String dat = (JOptionPane.showInputDialog("Ingrese el dato: "));
                Enumeration<String> llaves = directory.keys();
                String cad;
                ArrayList<String> c;
                boolean sw = true;
                while (llaves.hasMoreElements() && sw == true) {
                    cad = llaves.nextElement();
                    c = directory.get(cad);
                    if (c.get(camp).equals(dat)) {
                        sw = false;
                    }
                }
                if (!sw) {
                    JOptionPane.showMessageDialog(null, "El " + dat + " se encontro");
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontro");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Campo incorrecto");
            }
        }

    }//GEN-LAST:event_Btn_searchActionPerformed

    private void Btn_sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_sortActionPerformed
        Collections.sort(vec);
        ArrayList<String> r;
        String[] rows = new String[m.intValue() + 1];
        String val, camps;
        DefaultTableModel model = (DefaultTableModel) JTable.getModel();
        model.setRowCount(0);
        model.setColumnCount(0);
        for (int i = 0; i < m.intValue() + 1; i++) {
            if (i == 0) {
                model.addColumn("Key");
            } else {
                model.addColumn("C." + i);
            }
        }
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo));) {
            for (int i = 0; i < vec.size(); i++) {
                val = vec.get(i).toString();
                r = directory.get(val);
                camps = "";
                for (int j = 0; j < r.size(); j++) {
                    camps += r.get(j) + "|";
                    rows[j + 1] = r.get(j);
                }
                rows[0] = val;
                bw.write("Llaves: " + val + " " + camps);
                bw.newLine();
                model.addRow(rows);
            }
            JTable.setModel(model);
            System.out.println("¬Arhivo Ordenado Cargado¬");
        } catch (IOException ex) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_Btn_sortActionPerformed

    private void Btn_max_minActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_max_minActionPerformed
        Txt_rp.setText("");
        BigInteger max = BigInteger.ZERO, min = BigInteger.ZERO, data;
        int camp = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo: ")) - 1;
        if (camp < m.intValue() && camp >= 0 && camp % 2 == 0) {
            Enumeration<String> llaves = directory.keys();
            String cad;
            ArrayList<String> c;
            boolean sw = true;

            while (llaves.hasMoreElements()) {
                cad = llaves.nextElement();
                c = directory.get(cad);
                if (sw == true) {
                    min = new BigInteger(c.get(camp));
                    max = min;
                    sw = false;
                } else {
                    data = new BigInteger(c.get(camp));
                    if (data.compareTo(max) > 0) {
                        max = data;
                    }
                    if (data.compareTo(min) < 0) {
                        min = data;
                    }
                }

            }
            Txt_rp.setText("El dato mayor y menor del campo " + (camp + 1) + " es: " + max + "/" + min);

        } else {
            JOptionPane.showMessageDialog(null, "Campo incorrecto");
        }
    }//GEN-LAST:event_Btn_max_minActionPerformed

    private void Btn_promedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_promedioActionPerformed
        Txt_rp.setText("");
        int camp = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo: ")) - 1;
        BigInteger sum = BigInteger.ZERO;
        if (camp < m.intValue() && camp >= 0 && camp % 2 == 0) {
            Enumeration<String> llaves = directory.keys();
            String cad;
            ArrayList<String> c;
            while (llaves.hasMoreElements()) {
                cad = llaves.nextElement();
                c = directory.get(cad);
                sum = sum.add(new BigInteger(c.get(camp)));
            }
            Txt_rp.setText("El promedio de datos del " + (camp + 1) + " es: " + sum.divide(n));
        } else {
            JOptionPane.showMessageDialog(null, "Campo incorrecto");
        }
    }//GEN-LAST:event_Btn_promedioActionPerformed

    private void btn_modaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modaActionPerformed
        Txt_rp.setText("");
        int camp = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo: ")) - 1;
        if (camp < m.intValue() && camp >= 0) {
            Enumeration<String> llaves = directory.keys();
            String cad;
            ArrayList<String> c;
            ArrayList<String> r = new ArrayList<>();
            int cont = 0, dis = 0;
            String me = "0";
            while (llaves.hasMoreElements()) {
                cad = llaves.nextElement();
                c = directory.get(cad);
                r.add(c.get(camp));
            }
            Collections.sort(r);//Campos ordenados
            for (int i = 0; i < r.size() - 1; i++) {//Moda : Se compara la distancia de los datos consecutivos 
                if (r.get(i).compareTo(r.get(i + 1)) == 0) {
                    cont++;
                    if (cont > dis) {
                        me = r.get(i) + "";
                        dis = cont;
                    } else if (cont == dis) {
                        me += "," + r.get(i);
                    }
                } else {
                    cont = 0;
                }
            }
            Txt_rp.setText("La moda en el campo " + (camp + 1) + " es: " + me);
        } else {
            JOptionPane.showMessageDialog(null, "Campo incorrecto");
        }
    }//GEN-LAST:event_btn_modaActionPerformed

    private void btn_archivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_archivoActionPerformed
        FileNameExtensionFilter filter
                = new FileNameExtensionFilter("Archivos.txt", "txt", "texto");
        Fc.setFileFilter(filter);
        int Opcion = Fc.showOpenDialog(this); //Mostrar el FileChooser
        if (Opcion == JFileChooser.APPROVE_OPTION) {//Si el usuario escogió abrir
            archivo = Fc.getSelectedFile();
            DefaultTableModel model = (DefaultTableModel) JTable.getModel();
            model.setRowCount(0);
            model.setColumnCount(0);
            try (Scanner lector = new Scanner(archivo)) {//Mientras el archivo tenga otra linea
                String[] datos = new String[10];
                boolean sw = true;
                while (lector.hasNext()&& sw==true) {
                    String Linea = lector.nextLine();
                    datos = Linea.split(";");
                    sw=false;
                }
                lector.close();
                int col = datos.length;
                for (int i = 0; i < col; i++) {
                    if (i == 0) {
                        model.addColumn("Key");
                    } else {
                        model.addColumn("C." + i);
                    }
                }
                Scanner onishan = new Scanner(archivo);
                while (onishan.hasNextLine()) {
                    String Linea = lector.nextLine();//Pedir Linea
                    datos = Linea.split(";");//Separar los datos
                    model.addRow(datos);//Agregamos datos a la table
                }
            } catch (FileNotFoundException ex) {
                // TODO enviar mensaje al usuario
            } catch (NumberFormatException ex) {
                // TODO enviar mensaje al usuario
            } catch (Exception ex) {
                // TODO enviar mensaje al usuario
            }
        }
    }//GEN-LAST:event_btn_archivoActionPerformed

    public static String RandomNum(BigInteger tam, BigInteger i, String numbers) {
        while (i.compareTo(tam) < 0) {
            String num = "" + ((int) (Math.random() * 9) + 1);
            numbers += num;
            i = i.add(BigInteger.ONE);
        }
        return numbers;

    }

    public static String RandomLetter(BigInteger tam, BigInteger i, String letters) {
        while (i.compareTo(tam) < 0) {
            letters += (char) (Math.random() * (91 - 65) + 65);
            i = i.add(BigInteger.ONE);
        }
        return letters;
    }

    public static int[] RandomPos(int[] random) {
        for (int i = 0; i < random.length; i++) {
            random[i] = (int) (Math.random() * 9 + 1);
        }
        return random;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_llenar;
    private javax.swing.JButton Btn_max_min;
    private javax.swing.JButton Btn_promedio;
    private javax.swing.JButton Btn_search;
    private javax.swing.JButton Btn_sort;
    private javax.swing.JFileChooser Fc;
    private javax.swing.JTable JTable;
    private javax.swing.JTextField Txt_rp;
    private javax.swing.JButton btn_archivo;
    private javax.swing.JButton btn_moda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
